{"version":3,"sources":["components/PersonForm.js","components/Person.js","components/Persons.js","components/Filter.js","services/persons.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["PersonForm","addPerson","newName","handleNameChange","newNumber","handleNumberChange","onSubmit","value","onChange","type","Person","person","handleDeleteButton","name","number","id","onClick","Persons","persons","searchFilter","filter","trim","toUpperCase","includes","map","key","Filter","handleFilterChange","baseUrl","axios","get","then","response","data","newObject","post","put","delete","Notification","message","notificationError","usedClass","className","App","useState","setPersons","setNewName","setNewNumber","setSearchFilter","notificationMessage","setNotificationMessage","setNotificationError","useEffect","personService","initialPersons","event","target","preventDefault","personObject","console","log","length","returnedPerson","concat","setTimeout","catch","error","window","confirm","find","p","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2NAceA,EAZI,SAAC,GAA6E,IAA3EC,EAA0E,EAA1EA,UAAWC,EAA+D,EAA/DA,QAASC,EAAsD,EAAtDA,iBAAkBC,EAAoC,EAApCA,UAAWC,EAAyB,EAAzBA,mBACrE,OACE,0BAAMC,SAAUL,GAChB,sCAAW,2BAAOM,MAAOL,EAASM,SAAUL,KAC5C,wCAAa,2BAAOI,MAAOH,EAAWI,SAAUH,KAChD,6BACE,4BAAQI,KAAK,UAAb,UCESC,EARA,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,OAAQC,EAAyB,EAAzBA,mBACxB,OACA,4BAAKD,EAAOE,KAAZ,IAAmBF,EAAOG,OAAO,4BAAQP,MAAOI,EAAOI,GAAIC,QAASJ,GAAnC,YCgBpBK,EAjBC,SAAC,GAAkD,IAAhDC,EAA+C,EAA/CA,QAASC,EAAsC,EAAtCA,aAAcP,EAAwB,EAAxBA,mBAMtC,OACI,oCACA,4BACGM,EAAQE,QAAO,SAAAT,GAAM,OAAKA,EAAOE,KAAKQ,OAAOC,cAAcC,SAASJ,EAAaE,OAAOC,kBAAiBE,KAAI,SAAAb,GAAM,OAClH,kBAAC,EAAD,CAAQc,IAAKd,EAAOI,GAAIJ,OAAQA,EAAQC,mBAAoBA,UCHzDc,EARA,SAAC,GAA0C,IAAxCP,EAAuC,EAAvCA,aAAcQ,EAAyB,EAAzBA,mBAC9B,OACE,kDACsB,2BAAOpB,MAAOY,EAAcX,SAAUmB,M,gBCJ1DC,EAAU,gBAsBD,EApBA,WAEX,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAkB9B,EAfE,SAAAC,GAEb,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa9B,EAVE,SAAClB,EAAImB,GAElB,OADgBL,IAAMO,IAAN,UAAaR,EAAb,YAAwBb,GAAMmB,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ9B,EALQ,SAAClB,GAElB,OADgBc,IAAMQ,OAAN,UAAgBT,EAAhB,YAA2Bb,IAC5BgB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCJ9BK,EAdI,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,kBAC7B,GAAgB,OAAZD,EACF,OAAO,KAGT,IAAME,EAAYD,EAAoB,QAAU,UAEhD,OACE,yBAAKE,UAAWD,GACbF,ICyIMI,EA7IH,WAAO,IAAD,EACgBC,mBAAS,IADzB,mBACR1B,EADQ,KACC2B,EADD,OAGgBD,mBAAS,IAHzB,mBAGR1C,EAHQ,KAGC4C,EAHD,OAIoBF,mBAAS,IAJ7B,mBAIRxC,EAJQ,KAIG2C,EAJH,OAK0BH,mBAAS,IALnC,mBAKRzB,EALQ,KAKM6B,EALN,OAMwCJ,mBAAS,MANjD,mBAMRK,EANQ,KAMaC,EANb,OAOoCN,oBAAS,GAP7C,mBAORJ,EAPQ,KAOWW,EAPX,KAUhBC,qBAAU,WACRC,IAEGtB,MAAK,SAAAuB,GACJT,EAAWS,QAEd,IAiGH,OACE,6BACE,yCACA,kBAAC,EAAD,CAAcf,QAAWU,EAAqBT,kBAAmBA,IACjE,kBAAC,EAAD,CACErB,aAAgBA,EAChBQ,mBAzBqB,SAAC4B,GAC1BP,EAAgBO,EAAMC,OAAOjD,UA2B3B,yCACA,kBAAC,EAAD,CACEN,UAzGY,SAAAsD,GAChBA,EAAME,iBACN,IAEMC,EAAe,CAAE7C,KAFVX,EAEgBY,OADdV,GAMf,GAHAuD,QAAQC,IAAI,mBAAoB1C,GAGmC,IAA/DA,EAAQE,QAAO,SAAAT,GAAM,OAAKA,EAAOE,OAASX,KAAU2D,OACtDR,EACUK,GACL3B,MAAK,SAAA+B,GACNjB,EAAW3B,EAAQ6C,OAAOD,IAC1BZ,EAAuB,SAAD,OAAUhD,IAChC8D,YAAW,WACTd,EAAuB,QACtB,KACHJ,EAAW,IACXC,EAAa,OAEdkB,OAAM,SAAAC,GACLf,GAAqB,GACrBD,EAAuBgB,EAAMlC,SAASC,KAAKiC,OAC3CF,YAAW,WACTd,EAAuB,MACvBC,GAAqB,KACpB,KACHL,EAAW,IACXC,EAAa,IACbY,QAAQC,IAAIM,EAAMlC,SAASC,KAAKiC,eAIpC,GAAIC,OAAOC,QAAP,UAAkBlE,EAAlB,2EAAoG,CAEtG,IAAMS,EAASO,EAAQmD,MAAK,SAAAC,GAAC,OAAIA,EAAEzD,OAASX,KAC5CyD,QAAQC,IAAI,iBAAkBjD,EAAOI,IACrC,IAAMA,EAAKJ,EAAOI,GAElBsC,EACQtC,EAAI2C,GACT3B,MAAK,SAAA+B,GACNZ,EAAuB,WAAD,OAAYhD,IAClC8D,YAAW,WACTd,EAAuB,QACtB,KACHJ,EAAW,IACXC,EAAa,IACbF,EAAW3B,EAAQM,KAAI,SAAA8C,GAAC,OAAIA,EAAEvD,KAAOA,EAAKuD,EAAIR,SAE/CG,OAAM,SAAAC,GACLf,GAAqB,GACrBD,EAAuB,kBAAD,OAAmBvC,EAAOE,KAA1B,0CACtBmD,YAAW,WACTd,EAAuB,MACvBC,GAAqB,KACpB,KAGHN,EAAW3B,EAAQE,QAAO,SAAAkD,GAAC,OAAIA,EAAEvD,KAAOA,WA8C1Cb,QAASA,EACTC,iBAxCmB,SAACoD,GACxBT,EAAWS,EAAMC,OAAOjD,QAwCpBH,UAAWA,EACXC,mBAtCqB,SAACkD,GAC1BR,EAAaQ,EAAMC,OAAOjD,UAwCxB,uCACA,kBAAC,EAAD,CACEW,QAAWA,EACXC,aAAgBA,EAChBP,mBArCqB,SAAC2C,GAC1B,IAAMxC,EAAKwC,EAAMC,OAAOjD,MAClBI,EAASO,EAAQmD,MAAK,SAAA1D,GAAM,OAAIA,EAAOI,KAAOA,KAIhDoD,OAAOC,QAAP,iBAAyBzD,EAAOE,KAAhC,QACFwC,EACctC,GACbgB,MAAK,SAAAC,GACJa,EAAW3B,EAAQE,QAAO,SAAAT,GAAM,OAAIA,EAAOI,KAAOA,cCvGtCwD,QACW,cAA7BJ,OAAOK,SAASC,UAEe,UAA7BN,OAAOK,SAASC,UAEhBN,OAAOK,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnD,MAAK,SAAAoD,GACJA,EAAaC,gBAEdnB,OAAM,SAAAC,GACLP,QAAQO,MAAMA,EAAM3B,c","file":"static/js/main.64c8fa5b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst PersonForm = ({ addPerson, newName, handleNameChange, newNumber, handleNumberChange }) => {\r\n  return (\r\n    <form onSubmit={addPerson}>\r\n    <div>name: <input value={newName} onChange={handleNameChange}/></div>\r\n    <div>number: <input value={newNumber} onChange={handleNumberChange} /></div>\r\n    <div>\r\n      <button type=\"submit\">add</button>\r\n    </div>\r\n  </form>\r\n  )\r\n}\r\n\r\nexport default PersonForm","import React from 'react'\r\n\r\nconst Person = ({ person, handleDeleteButton }) => {\r\n  return (\r\n  <li>{person.name} {person.number}<button value={person.id} onClick={handleDeleteButton}>delete</button></li>\r\n  )\r\n}\r\n\r\n\r\n\r\nexport default Person","import React from 'react'\r\nimport Person from './Person'\r\n\r\nconst Persons = ({ persons, searchFilter, handleDeleteButton}) => {\r\n\r\n  //console.log('persons is ', persons)\r\n  //let per = persons.filter(person => (person.name.trim().toUpperCase().includes(searchFilter.trim().toUpperCase())))\r\n  //console.log('person is ', per)\r\n\r\n    return (\r\n        <>\r\n        <ul>\r\n          {persons.filter(person => (person.name.trim().toUpperCase().includes(searchFilter.trim().toUpperCase()))).map(person => \r\n            <Person key={person.id} person={person} handleDeleteButton={handleDeleteButton} />\r\n          )}\r\n        </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Persons","import React from 'react'\r\n\r\nconst Filter = ({ searchFilter, handleFilterChange }) => {\r\n  return (\r\n    <div>\r\n        filter shown with <input value={searchFilter} onChange={handleFilterChange}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Filter","import axios from 'axios'\r\nconst baseUrl = './api/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n  }\r\n  \r\n  const create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n  }\r\n  \r\n  const update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n  }\r\n\r\n  const deletePerson = (id) => {\r\n      const request = axios.delete(`${baseUrl}/${id}`)\r\n      return request.then(response => response.data)\r\n  }\r\n\r\nexport default { getAll, create, update, deletePerson }","import React from 'react'\r\n\r\nconst Notification = ({ message, notificationError }) => {\r\n    if (message === null) {\r\n      return null\r\n    }\r\n\r\n    const usedClass = notificationError ? \"error\" : \"success\"\r\n  \r\n    return (\r\n      <div className={usedClass}>\r\n        {message}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  export default Notification","import React, { useState, useEffect } from 'react'\nimport PersonForm from './components/PersonForm'\nimport Persons from './components/Persons'\nimport Filter from './components/Filter'\nimport personService from './services/persons'\nimport Notification from './components/Notification'\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([\n  ]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ searchFilter, setSearchFilter ] = useState('')\n  const [ notificationMessage, setNotificationMessage ] = useState(null)\n  const [ notificationError, setNotificationError ] = useState(false)\n\n  //Fill up the persons object with data from the JSON file\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n      })\n  }, [])\n\n  //Add a person to the JSON file\n  const addPerson = event => {\n    event.preventDefault()\n    const name = newName\n    const number = newNumber\n    const personObject = { name, number }\n\n    console.log('from add person ', persons)\n\n    // If the person doesn't exist in the phonebook, proceed with adding the person\n    if (persons.filter(person => (person.name === newName)).length === 0) {\n      personService\n        .create(personObject)\n          .then(returnedPerson => {\n          setPersons(persons.concat(returnedPerson))\n          setNotificationMessage(`Added ${newName}`)\n          setTimeout(() => {\n            setNotificationMessage(null)\n          }, 5000)\n          setNewName('')\n          setNewNumber('')\n        })\n        .catch(error => {\n          setNotificationError(true)\n          setNotificationMessage(error.response.data.error)\n          setTimeout(() => {\n            setNotificationMessage(null)\n            setNotificationError(false)\n          }, 5000)\n          setNewName('')\n          setNewNumber('')\n          console.log(error.response.data.error)\n        })\n    } else { // The person exist in the phonebook\n      //Proceed with updating the record if the user clicks \"ok\" to replace the phone number\n      if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\n\n        const person = persons.find(p => p.name === newName)\n        console.log('person id is: ', person.id)\n        const id = person.id\n\n        personService\n        .update(id, personObject)\n          .then(returnedPerson => {\n          setNotificationMessage(`Updated ${newName}`)\n          setTimeout(() => {\n            setNotificationMessage(null)\n          }, 5000)\n          setNewName('')\n          setNewNumber('')\n          setPersons(persons.map(p => p.id !== id ? p : returnedPerson))\n        })\n        .catch(error => {\n          setNotificationError(true)\n          setNotificationMessage(`Information of ${person.name} has already been removed from server`)\n          setTimeout(() => {\n            setNotificationMessage(null)\n            setNotificationError(false)\n          }, 5000)\n          //setNewName('')\n          //setNewNumber('')\n          setPersons(persons.filter(p => p.id !== id ))\n        })\n        \n      }\n    }\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    setSearchFilter(event.target.value)\n  }\n\n  const handleDeleteButton = (event) => {\n    const id = event.target.value\n    const person = persons.find(person => person.id === id)\n    //console.log('person id is ', person)\n    \n\n    if (window.confirm(`Delete ${person.name} ?`)) {\n      personService\n      .deletePerson(id)\n      .then(response => {\n        setPersons(persons.filter(person => person.id !== id))\n      })\n    }\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message = {notificationMessage} notificationError={notificationError}/>\n      <Filter \n        searchFilter = {searchFilter}\n        handleFilterChange = {handleFilterChange}\n      />\n\n      <h3>add a new</h3>\n      <PersonForm \n        addPerson={addPerson}\n        newName={newName}\n        handleNameChange={handleNameChange}\n        newNumber={newNumber}\n        handleNumberChange={handleNumberChange}\n      />\n\n      <h3>Numbers</h3>\n      <Persons\n        persons = {persons}\n        searchFilter = {searchFilter}\n        handleDeleteButton = {handleDeleteButton}\n      />\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}